%%


pecc = function(obs,pred)
  sum(obs==pred)/length(obs)

# Machine Learning: comparar com / sem jeotgal (12-20 dias)
MTBLS654_12_16_20_ML = subset_samples_by_metadata_values(MTBLS654,"Fermentation_days",c(12,16,20))
MTBLS654_12_16_20_ML_A = subset_samples_by_metadata_values(MTBLS654_12_16_20_ML,"Factor.Value.Replicate.",c("A"))
MTBLS654_12_16_20_ML_B = subset_samples_by_metadata_values(MTBLS654_12_16_20_ML,"Factor.Value.Replicate.",c("B"))



res_train_concentrations=train_models_performance(MTBLS654_12_16_20_ML_A, c("pls"), "Jeotgal", "repeatedcv")

result=predict_samples(res_train_concentrations$final.models$pls, MTBLS654_12_16_20_ML_B$data)

table(result[,2], MTBLS654_12_16_20_ML_B$metadata$Jeotgal)
#so o x12nkb diz COM e está errado (outl)
#      COM SEM
#COM   6   1
#SEM   0   5

pecc(MTBLS654_12_16_20_ML_B$metadata$Jeotgal,result[,2])

#0.9166667

# Machine Learning: comparar com / sem jeotgal (25-40 dias)
MTBLS654_25_30_40_ML = subset_samples_by_metadata_values(MTBLS654,"Fermentation_days",c(25,30,40))
MTBLS654_25_30_40_ML_A = subset_samples_by_metadata_values(MTBLS654_25_30_40_ML,"Factor.Value.Replicate.",c("A"))
MTBLS654_25_30_40_ML_B = subset_samples_by_metadata_values(MTBLS654_25_30_40_ML,"Factor.Value.Replicate.",c("B"))

res_train_concentrations=train_models_performance(MTBLS654_25_30_40_ML_A, "pls", "Jeotgal", "loocv", metric="Accuracy")

res_train_concentrations$performance

result = predict_samples(res_train_concentrations$final.models$pls, MTBLS654_25_30_40_ML_B$data)
#bons resultados
table(result[,2], MTBLS654_25_30_40_ML_B$metadata$Jeotgal)

#  COM SEM
#COM   6   0
#SEM   0   6

pecc(MTBLS654_25_30_40_ML_B$metadata$Jeotgal,result[,2])

#1


rmse = function(previstos, reais) sqrt(mean((previstos-reais)^2))
mad = function(previstos, reais) mean(abs(previstos-reais))

#previsao de dias de fermentacao
MTBLS654_A = subset_samples_by_metadata_values(MTBLS654,"Factor.Value.Replicate.","A")
MTBLS654_B  = subset_samples_by_metadata_values(MTBLS654,"Factor.Value.Replicate.","B")

res = train_and_predict(MTBLS654_A, MTBLS654_B$data, num.folds = 5, num.repeats = 20,'Fermentation_days', "rf", "repeatedcv")

rmse(res$predictions.result[,2], MTBLS654_B$metadata$Fermentation_days)
#3.170678
mad (res$predictions.result[,2], MTBLS654_B$metadata$Fermentation_days)
##2.483101


#previsao de dias de fermentacao (dados sem jeotgal)
MTBLS654_A_SEM = subset_samples_by_metadata_values(MTBLS654_A,"Jeotgal","SEM")
MTBLS654_B_SEM = subset_samples_by_metadata_values(MTBLS654_B,"Jeotgal","SEM")
res = train_and_predict(MTBLS654_A_SEM, MTBLS654_B_SEM$data, num.folds = 5, num.repeats = 50,'Fermentation_days', "knn", "repeatedcv")


rmse(res$predictions.result[,2], MTBLS654_B$metadata$Fermentation_days)
#[1] 11.73286
mad (res$predictions.result[,2], MTBLS654_B$metadata$Fermentation_days)
#[1] 10.4
#resultados mt fracos




#previsao de dias de fermentacao (dados com jeotgal)
MTBLS654_A_COM = subset_samples_by_metadata_values(MTBLS654_A,"Jeotgal","COM")
MTBLS654_B_COM = subset_samples_by_metadata_values(MTBLS654_B,"Jeotgal","COM")
res = train_and_predict(MTBLS654_A_COM, MTBLS654_B_COM$data, num.folds = 5, num.repeats = 50,'Fermentation_days', "rf", "loocv")

rmse(res$predictions.result[,2], MTBLS654_B_COM$metadata$Fermentation_days)
#[1] 3.8704
mad (res$predictions.result[,2], MTBLS654_B_COM$metadata$Fermentation_days)
#[1] 3.08


#previsao de amostras no inicio ou fim de fermentacao
MTBLS654_0_40 = subset_samples_by_metadata_values(MTBLS654,"Fermentation_days",c(0,40))
MTBLS654_0_40_A = subset_samples_by_metadata_values(MTBLS654_0_40,"Factor.Value.Replicate.","A")
MTBLS654_0_40_B = subset_samples_by_metadata_values(MTBLS654_0_40,"Factor.Value.Replicate.","B")

res=train_and_predict(MTBLS654_0_40_A, MTBLS654_0_40_B$data, num.folds = 5, num.repeats = 20,'Fermentation_days', "nnet", "repeatedcv")

results_convert= c() # converter os valores das func. objetivos nos output desejados
for (i in 1:length(res$predictions.result[,2])){
  if (res$predictions.result[,2][i]<0.5){results_convert = c(results_convert,0)}
  else {results_convert = c(results_convert,40)}
}
#bons resultados
table(results_convert, MTBLS654_0_40_B$metadata$Fermentation_days)

#results_convert 0 40
#0    4  0
#40   0  4


pecc(MTBLS654_0_40_B$metadata$Fermentation_days, results_convert)
#1

#########################
#########################
#Feature selection

# Random Forests:
vals=feature_selection(MTBLS654, "Fermentation_days", method = "rfe", functions=caret::rfFuncs, validation = "repeatedcv", repeats = 5, number = 10, subsets = 2^(2:4))
#glycine, lactate, dimethylamine, sucrose, fructose



MTBLS654_0_40 = subset_samples_by_metadata_values(MTBLS654,"Fermentation_days",c(0,40))


MTBLS654_A_rf = subset_x_values(MTBLS654_A, c("glycine", "lactate", "dimethylamine", "sucrose", "fructose"))
MTBLS654_B_rf = subset_x_values(MTBLS654_B, c("glycine", "lactate", "dimethylamine", "sucrose", "fructose"))



res = train_and_predict(MTBLS654_A_rf, MTBLS654_B_rf$data, num.folds = 5, num.repeats = 50,'Fermentation_days', "rf", "repeatedcv")

res$predictions.result

rmse(res$predictions.result[,2], MTBLS654_B_rf$metadata$Fermentation_days)
# 3.088342
mad (res$predictions.result[,2], MTBLS654_B_rf$metadata$Fermentation_days)
# 2.283631





#####
# Linear Regression:
vals=feature_selection(MTBLS654, "Fermentation_days", method = "rfe", functions=caret::lmFuncs, validation = "repeatedcv", repeats = 5, number = 10, subsets = 2^(2:4))
#inosine, tyrosine, phenylalanine, valine, trimethylamine

vals$optVariables



MTBLS654_A_lm = subset_x_values(MTBLS654_A, c("inosine", "tyrosine", "phenylalanine", "valine", "trimethylamine"))
MTBLS654_B_lm = subset_x_values(MTBLS654_B, c("inosine", "tyrosine", "phenylalanine", "valine", "trimethylamine"))

res = train_and_predict(MTBLS654_A_lm, MTBLS654_B_lm$data, num.folds = 5, num.repeats = 50,'Fermentation_days', "lm", "repeatedcv")

res$predictions.result

rmse(res$predictions.result[,2], MTBLS654_B_lm$metadata$Fermentation_days)
# [1] 7.398949
mad (res$predictions.result[,2], MTBLS654_B_lm$metadata$Fermentation_days)
# [1] 5.739444


#Bagged Trees:
vals=feature_selection(MTBLS654, "Fermentation_days", method = "rfe", functions=caret::treebagFuncs, validation = "repeatedcv", repeats = 5, number = 10, subsets = 2^(2:4))
#glycine, fructose, sucrose, lactate, mannitol



MTBLS654_A_bg = subset_x_values(MTBLS654_A, c("glycine", "fructose", "sucrose", "lactate", "mannitol"))
MTBLS654_B_bg = subset_x_values(MTBLS654_B, c("glycine", "fructose", "sucrose", "lactate", "mannitol"))

res = train_and_predict(MTBLS654_A_bg, MTBLS654_B_bg$data, num.folds = 5, num.repeats = 50,'Fermentation_days', "treebag", "repeatedcv")

res$predictions.result

rmse(res$predictions.result[,2], MTBLS654_B_lm$metadata$Fermentation_days)
# [1] 4.278357
mad (res$predictions.result[,2], MTBLS654_B_lm$metadata$Fermentation_days)
# [1] 3.067681


#LDA
#vals=feature_selection(MTBLS654, "Fermentation_days", method = "rfe",  functions=caret::ldaFuncs, validation = "repeatedcv", repeats = 5, number = 10, subsets = 2^(2:4))
# so fiz feature pois modelo dava erro

#Naive-Bayes
#vals=feature_selection(MTBLS654, "Fermentation_days", method = "rfe",  functions=caret::nbFuncs, validation = "repeatedcv", repeats = 5, number = 10, subsets = 2^(2:4))
# so fiz feature pois modelo dava erro



##############

#regressao linear

linregression_onevar(MTBLS654, "acetate", c("Fermentation_days","Jeotgal"), "Fermentation_days+Jeotgal")
#este e um exemplo de metabolito; os códigos seguintes fazer para todos


reg_days_Jeot=linreg_all_vars(MTBLS654, c("Fermentation_days","Jeotgal"), "Fermentation_days+Jeotgal")

linreg_pvalue_table(reg_days_Jeot)

linreg_rsquared(reg_days_Jeot)

plot_regression_coefs_pvalues(reg_days_Jeot[1:6], bar.col=c("blue", "cyan", "red", "green", "yellow", "black"))
